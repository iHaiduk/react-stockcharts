{"version":3,"sources":["../../../../src/lib/series/StackedBarSeries.js"],"names":["React","Component","PropTypes","nest","d3Nest","merge","stack","d3Stack","GenericChartComponent","getAxisCanvas","identity","hexToRGBA","head","functor","plotDataLengthBarWidth","StackedBarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","drawOnCanvasHelper","svgHelper","clip","defaultProps","baseAt","xScale","yScale","range","direction","className","stroke","fill","opacity","width","swapScales","identityStack","keys","data","response","map","key","i","arrays","array","d","index","x","arguments","length","stackFn","defaultPostAction","postRotateAction","rotateXY","chartConfig","plotData","bars","doStuff","drawOnCanvas2","convertToArray","item","Array","isArray","getBarsSVG2","yAccessor","modifiedYAccessor","modifiedXAccessor","modifiedXScale","modifiedYScale","postProcessor","getBars","each","y","height","idx","entries","forEach","outer","values","strokeStyle","fillStyle","fillRect","strokeRect","after","spaceBetweenBar","getClassName","getFill","getBase","widthFunctor","barWidth","Math","round","eachBarWidth","offset","ds","appearance","eachYAccessor","_","newData","h","groupOffset","groupWidth","filter","isNaN","bar"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,QAAQC,MAAjB,QAA+B,eAA/B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,SAASC,OAAlB,QAAiC,UAAjC;;AAEA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,sBAA7C,QAA2E,UAA3E;;IAEMC,gB;;;AACL,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACZA,KADY;;AAElB,QAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,QAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AAHkB;AAIlB;;;;+BACYE,G,EAAKC,S,EAAW;AAAA,OACpBC,SADoB,GACND,SADM,CACpBC,SADoB;AAE5B;;AAEAC,sBAAmBH,GAAnB,EAAwB,KAAKJ,KAA7B,EAAoCK,SAApC,EAA+CC,SAA/C,EAA0Df,OAA1D;AACA;;;4BACSc,S,EAAW;AAAA,OACZC,SADY,GACED,SADF,CACZC,SADY;;;AAGpB,gCAAWE,UAAU,KAAKR,KAAf,EAAsBK,SAAtB,EAAiCC,SAAjC,EAA4Cf,OAA5C,CAAX;AACA;;;2BACQ;AAAA,OACAkB,IADA,GACS,KAAKT,KADd,CACAS,IADA;;;AAGR,eAAQ,qBAAR;AAAA,UACOA,IADP;AAAA,aAEU,KAAKR,SAFf;AAAA,gBAGa,KAAKE,YAHlB;AAAA,kBAIeV,aAJf;AAAA,YAKS,CAAC,KAAD;AALT;AAOA;;;;EA3B6BR,S;;AAmD/Bc,iBAAiBW,YAAjB,GAAgC;AAC/BC,SAAQ,gBAACC,MAAD,EAASC,MAAT,CAAe,QAAf;AAAA,SAA4BjB,KAAKiB,OAAOC,KAAP,EAAL,CAA5B;AAAA,EADuB;AAE/BC,YAAW,IAFoB;AAG/BC,YAAW,KAHoB;AAI/BC,SAAQ,IAJuB;AAK/BC,OAAM,SALyB;AAM/BC,UAAS,GANsB;AAO/BC,QAAOtB,sBAPwB;AAQ/BW,OAAM,IARyB;AAS/BY,aAAY;AATmB,CAAhC;;AAYA,OAAO,SAASC,aAAT,GAAyB;AAC/B,KAAIC,OAAO,EAAX;AACA,UAASjC,KAAT,CAAekC,IAAf,EAAqB;AACpB,MAAMC,WAAWF,KAAKG,GAAL,CAAS,UAACC,GAAD,EAAMC,CAAN,EAAY;AACrC;AACA,OAAIC,SAASL,KAAKE,GAAL,CAAS,aAAK;AAC1B;AACA,QAAII,QAAQ,CAAC,CAAD,EAAIC,EAAEJ,GAAF,CAAJ,CAAZ;AACAG,UAAMN,IAAN,GAAaO,CAAb;AACA,WAAOD,KAAP;AACA,IALY,CAAb;AAMAD,UAAOF,GAAP,GAAaA,GAAb;AACAE,UAAOG,KAAP,GAAeJ,CAAf;AACA,UAAOC,MAAP;AACA,GAXgB,CAAjB;AAYA,SAAOJ,QAAP;AACA;AACDnC,OAAMiC,IAAN,GAAa,UAASU,CAAT,EAAY;AACxB,MAAI,CAACC,UAAUC,MAAf,EAAuB;AACtB,UAAOZ,IAAP;AACA;AACDA,SAAOU,CAAP;AACA,SAAO3C,KAAP;AACA,EAND;AAOA,QAAOA,KAAP;AACA;;AAGD,OAAO,SAASiB,kBAAT,CAA4BH,GAA5B,EAAiCJ,KAAjC,EAAwCK,SAAxC,EAAmDC,SAAnD,EAA8D8B,OAA9D,EAAkI;AAAA,KAA3DC,iBAA2D,uEAAvC3C,QAAuC;AAAA,KAA7B4C,gBAA6B,uEAAVC,QAAU;AAAA,KAChI3B,MADgI,GAClFP,SADkF,CAChIO,MADgI;AAAA,KACzGC,MADyG,GAClFR,SADkF,CACxHmC,WADwH,CACzG3B,MADyG;AAAA,KAC/F4B,QAD+F,GAClFpC,SADkF,CAC/FoC,QAD+F;;;AAGxI,KAAMC,OAAOC,QAAQ3C,KAAR,EAAeM,SAAf,EAA0BmC,QAA1B,EAAoC7B,MAApC,EAA4CC,MAA5C,EAAoDuB,OAApD,EAA6DE,gBAA7D,EAA+ED,iBAA/E,CAAb;;AAEAO,eAAc5C,KAAd,EAAqBI,GAArB,EAA0BsC,IAA1B;AACA;;AAED,SAASG,cAAT,CAAwBC,IAAxB,EAA8B;AAC7B,QAAOC,MAAMC,OAAN,CAAcF,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;AACA;;AAED,OAAO,SAAStC,SAAT,CAAmBR,KAAnB,EAA0BK,SAA1B,EAAqCC,SAArC,EAAgD8B,OAAhD,EAAoH;AAAA,KAA3DC,iBAA2D,uEAAvC3C,QAAuC;AAAA,KAA7B4C,gBAA6B,uEAAVC,QAAU;AAAA,KAClH3B,MADkH,GACpEP,SADoE,CAClHO,MADkH;AAAA,KAC3FC,MAD2F,GACpER,SADoE,CAC1GmC,WAD0G,CAC3F3B,MAD2F;AAAA,KACjF4B,QADiF,GACpEpC,SADoE,CACjFoC,QADiF;;AAE1H,KAAMC,OAAOC,QAAQ3C,KAAR,EAAeM,SAAf,EAA0BmC,QAA1B,EAAoC7B,MAApC,EAA4CC,MAA5C,EAAoDuB,OAApD,EAA6DE,gBAA7D,EAA+ED,iBAA/E,CAAb;AACA,QAAOY,YAAYjD,KAAZ,EAAmB0C,IAAnB,CAAP;AACA;;AAED,SAASC,OAAT,CAAiB3C,KAAjB,EAAwBM,SAAxB,EAAmCmC,QAAnC,EAA6C7B,MAA7C,EAAqDC,MAArD,EAA6DuB,OAA7D,EAAsEE,gBAAtE,EAAwFD,iBAAxF,EAA2G;AAAA,KAClGa,SADkG,GACxElD,KADwE,CAClGkD,SADkG;AAAA,KACvF7B,UADuF,GACxErB,KADwE,CACvFqB,UADuF;;;AAG1G,KAAM8B,oBAAoB9B,aAAawB,eAAe7C,MAAMM,SAArB,CAAb,GAA+CuC,eAAeK,SAAf,CAAzE;AACA,KAAME,oBAAoB/B,aAAa6B,SAAb,GAAyB5C,SAAnD;;AAEA,KAAM+C,iBAAiBhC,aAAaR,MAAb,GAAsBD,MAA7C;AACA,KAAM0C,iBAAiBjC,aAAaT,MAAb,GAAsBC,MAA7C;;AAEA,KAAM0C,gBAAiBlC,aAAaiB,gBAAb,GAAgCD,iBAAvD;;AAEA,KAAMK,OAAOc,QAAQxD,KAAR,EAAeoD,iBAAf,EAAkCD,iBAAlC,EAAqDE,cAArD,EAAqEC,cAArE,EAAqFb,QAArF,EAA+FL,OAA/F,EAAwGmB,aAAxG,CAAb;;AAEA,QAAOb,IAAP;AACA;;AAED,OAAO,IAAMH,WAAW,SAAXA,QAAW,CAACT,KAAD;AAAA,QAAWA,MAAMJ,GAAN,CAAU,gBAAQ;AACpD,sBACI+B,IADJ;AAECxB,MAAGwB,KAAKC,CAFT;AAGCA,MAAGD,KAAKxB,CAHT;AAIC0B,WAAQF,KAAKrC,KAJd;AAKCA,UAAOqC,KAAKE;AALb;AAOA,EARkC,CAAX;AAAA,CAAjB;;AAUP,OAAO,SAASV,WAAT,CAAqBjD,KAArB,EAA4B0C,IAA5B,EAAkC;AACxC;AADwC,KAEhCvB,OAFgC,GAEpBnB,KAFoB,CAEhCmB,OAFgC;AAGxC;;AAEA,QAAOuB,KAAKhB,GAAL,CAAS,UAACK,CAAD,EAAI6B,GAAJ,EAAY;AAC3B,MAAI7B,EAAEX,KAAF,IAAW,CAAf,EAAkB;AACjB;AAAA,eAAkCW,EAAEf,SAApC;AAAA,YACSe,EAAEb,IADX;AAAA,QAEKa,EAAEE,CAFP;AAAA,QAEcF,EAAE2B,CAFhB;AAAA,QAGK3B,EAAEE,CAHP;AAAA,QAGcF,EAAE2B,CAAF,GAAM3B,EAAE4B;AAHtB,MAAkBC,GAAlB;AAIA;AACD;AAAA,cAAkC7B,EAAEf,SAApC;AAAA,WACSe,EAAEd,MADX;AAAA,SAEOc,EAAEb,IAFT;AAAA,MAGIa,EAAEE,CAHN;AAAA,MAIIF,EAAE2B,CAJN;AAAA,UAKQ3B,EAAEX,KALV;AAAA,gBAMcD,OANd;AAAA,WAOSY,EAAE4B;AAPX,KAAkBC,GAAlB;AAQA,EAfM,CAAP;AAgBA;;AAED,OAAO,SAAShB,aAAT,CAAuB5C,KAAvB,EAA8BI,GAA9B,EAAmCsC,IAAnC,EAAyC;AAAA,KACvCzB,MADuC,GAC5BjB,KAD4B,CACvCiB,MADuC;;;AAG/C,KAAM9B,OAAOC,SACXuC,GADW,CACP;AAAA,SAAKI,EAAEb,IAAP;AAAA,EADO,EAEX2C,OAFW,CAEHnB,IAFG,CAAb;;AAIAvD,MAAK2E,OAAL,CAAa,iBAAS;AAAA,MACbnC,GADa,GACGoC,KADH,CACbpC,GADa;AAAA,MACRqC,MADQ,GACGD,KADH,CACRC,MADQ;;AAErB,MAAIpE,KAAKoE,MAAL,EAAa5C,KAAb,GAAqB,CAAzB,EAA4B;AAC3BhB,OAAI6D,WAAJ,GAAkBtC,GAAlB;AACA;AACD,MAAMuC,YAAYtE,KAAKoE,MAAL,EAAa5C,KAAb,IAAsB,CAAtB,GACfO,GADe,GAEfhC,UAAUgC,GAAV,EAAe3B,MAAMmB,OAArB,CAFH;AAGAf,MAAI8D,SAAJ,GAAgBA,SAAhB;;AAEAF,SAAOF,OAAP,CAAe,aAAK;AACnB,OAAI/B,EAAEX,KAAF,IAAW,CAAf,EAAkB;AACjB;;;;;AAKA;;;;;;AAMAhB,QAAI+D,QAAJ,CAAapC,EAAEE,CAAF,GAAM,GAAnB,EAAwBF,EAAE2B,CAA1B,EAA6B,CAA7B,EAAgC3B,EAAE4B,MAAlC;AACA,IAbD,MAaO;AACN;;;;;;;AAOA;;;;;AAKAvD,QAAI+D,QAAJ,CAAapC,EAAEE,CAAf,EAAkBF,EAAE2B,CAApB,EAAuB3B,EAAEX,KAAzB,EAAgCW,EAAE4B,MAAlC;AACA,QAAI1C,MAAJ,EAAYb,IAAIgE,UAAJ,CAAerC,EAAEE,CAAjB,EAAoBF,EAAE2B,CAAtB,EAAyB3B,EAAEX,KAA3B,EAAkCW,EAAE4B,MAApC;AACZ;AAED,GA/BD;AAgCA,EA1CD;AA2CA;;AAED,OAAO,SAASH,OAAT,CAAiBxD,KAAjB,EAAwBM,SAAxB,EAAmC4C,SAAnC,EAA8CtC,MAA9C,EAAsDC,MAAtD,EAA8D4B,QAA9D,EAAiH;AAAA,KAAzCnD,KAAyC,uEAAjCgC,aAAiC;AAAA,KAAlB+C,KAAkB,uEAAV3E,QAAU;AAAA,KAC/GiB,MAD+G,GACtDX,KADsD,CAC/GW,MAD+G;AAAA,KACvGK,SADuG,GACtDhB,KADsD,CACvGgB,SADuG;AAAA,KAC5FE,IAD4F,GACtDlB,KADsD,CAC5FkB,IAD4F;AAAA,KACtFD,MADsF,GACtDjB,KADsD,CACtFiB,MADsF;AAAA,6BACtDjB,KADsD,CAC9EsE,eAD8E;AAAA,KAC9EA,eAD8E,yCAC5D,CAD4D;;;AAGvH,KAAMC,eAAe1E,QAAQmB,SAAR,CAArB;AACA,KAAMwD,UAAU3E,QAAQqB,IAAR,CAAhB;AACA,KAAMuD,UAAU5E,QAAQc,MAAR,CAAhB;;AAEA,KAAM+D,eAAe7E,QAAQG,MAAMoB,KAAd,CAArB;AACA,KAAMA,QAAQsD,aAAa1E,KAAb,EAAoB;AACjCY,gBADiC;AAEjCN,sBAFiC;AAGjCmC;AAHiC,EAApB,CAAd;;AAMA,KAAMkC,WAAWC,KAAKC,KAAL,CAAWzD,KAAX,CAAjB;;AAEA,KAAM0D,eAAe,CAACH,WAAWL,mBAAmBpB,UAAUf,MAAV,GAAmB,CAAtC,CAAZ,IAAwDe,UAAUf,MAAvF;;AAEA,KAAM4C,SAAUJ,aAAa,CAAb,GAAiB,CAAjB,GAAqB,MAAMvD,KAA3C;;AAEA,KAAM4D,KAAKvC,SACTf,GADS,CACL,gBAAQ;AACZ;AACA,MAAIK,IAAI;AACPkD,eAAY,EADL;AAGPhD,MAAG3B,UAAUmD,IAAV;AAHI,GAAR;AAKAP,YAAUY,OAAV,CAAkB,UAACoB,aAAD,EAAgBtD,CAAhB,EAAsB;AACvC,OAAMD,YAAUC,CAAhB;AACAG,KAAEJ,GAAF,IAASuD,cAAczB,IAAd,CAAT;AACA,OAAMwB,aAAa;AAClBjE,eAAWuD,aAAad,IAAb,EAAmB7B,CAAnB,CADO;AAElBX,YAAQA,SAASuD,QAAQf,IAAR,EAAc7B,CAAd,CAAT,GAA4B,MAFlB;AAGlBV,UAAMsD,QAAQf,IAAR,EAAc7B,CAAd;AAHY,IAAnB;AAKAG,KAAEkD,UAAF,CAAatD,GAAb,IAAoBsD,UAApB;AACA,GATD;AAUA,SAAOlD,CAAP;AACA,EAnBS,CAAX;;AAqBA,KAAMR,OAAO2B,UAAUxB,GAAV,CAAc,UAACyD,CAAD,EAAIvD,CAAJ;AAAA,eAAcA,CAAd;AAAA,EAAd,CAAb;;AAEA;;AAEA,KAAMJ,OAAOlC,QAAQiC,IAAR,CAAaA,IAAb,EAAmByD,EAAnB,CAAb;;AAEA;;AAEA,KAAMI,UAAU5D,KAAKE,GAAL,CAAS,UAAC+B,IAAD,EAAO7B,CAAP,EAAa;AACrC,MAAMD,MAAM8B,KAAK9B,GAAjB;AACA,SAAO8B,KAAK/B,GAAL,CAAS,UAACK,CAAD,EAAO;AACtB;AACA,OAAID,QAAQ,CAACC,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,CAAP,CAAZ;AACAD,SAAMN,IAAN,GAAa;AACZS,OAAGF,EAAEP,IAAF,CAAOS,CADE;AAEZL,QAFY;AAGZqD,gBAAYlD,EAAEP,IAAF,CAAOyD,UAAP,CAAkBtD,GAAlB;AAHA,IAAb;AAKA,UAAOG,KAAP;AACA,GATM,CAAP;AAUA,EAZe,CAAhB;AAaA;AACA;;AAEA,KAAMY,OAAOrD,MAAM+F,OAAN;AACZ;AADY,EAEX1D,GAFW,CAEP,aAAK;AACT;AACA,MAAIgC,IAAI7C,OAAOkB,EAAE,CAAF,CAAP,CAAR;AACA;;;AAGA,MAAIsD,IAAIZ,QAAQ7D,MAAR,EAAgBC,MAAhB,EAAwBkB,EAAEP,IAA1B,IAAkCX,OAAOkB,EAAE,CAAF,IAAOA,EAAE,CAAF,CAAd,CAA1C;AACA;AACA;AACA;AACA;AACA,MAAIsD,IAAI,CAAR,EAAW;AACV3B,OAAIA,IAAI2B,CAAR;AACAA,OAAI,CAACA,CAAL;AACA;AACD;AACA;;AAEA,sBACItD,EAAEP,IAAF,CAAOyD,UADX;AAEC;AACA;AACAhD,MAAG2C,KAAKC,KAAL,CAAWjE,OAAOmB,EAAEP,IAAF,CAAOS,CAAd,IAAmBb,QAAQ,CAAtC,CAJJ;AAKCsC,MAAGA,CALJ;AAMC4B,gBAAaV,KAAKC,KAAL,CAAWE,UAAUhD,EAAEP,IAAF,CAAOI,CAAP,GAAW,CAAX,GAAe,CAACkD,eAAeR,eAAhB,IAAmCvC,EAAEP,IAAF,CAAOI,CAAzD,GAA6D,CAAvE,CAAX,CANd;AAOC2D,eAAYX,KAAKC,KAAL,CAAWC,YAAX,CAPb;AAQCC,WAAQH,KAAKC,KAAL,CAAWE,MAAX,CART;AASCpB,WAAQ0B,CATT;AAUCjE,UAAOuD;AAVR;AAYA,EAhCW,EAiCXa,MAjCW,CAiCJ;AAAA,SAAO,CAACC,MAAMC,IAAIhC,CAAV,CAAR;AAAA,EAjCI,CAAb;;AAmCA,QAAOW,MAAM3B,IAAN,CAAP;AACA;;AAED,eAAe3C,gBAAf","file":"StackedBarSeries.js","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { nest as d3Nest } from \"d3-collection\";\nimport { merge } from \"d3-array\";\nimport { stack as d3Stack } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport { identity, hexToRGBA, head, functor, plotDataLengthBarWidth } from \"../utils\";\n\nclass StackedBarSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\t// var { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tdrawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, d3Stack);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\n\t\treturn <g>{svgHelper(this.props, moreProps, xAccessor, d3Stack)}</g>;\n\t}\n\trender() {\n\t\tconst { clip } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tclip={clip}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n}\n\nStackedBarSeries.propTypes = {\n\tbaseAt: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func,\n\t]).isRequired,\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]).isRequired,\n\tstroke: PropTypes.bool.isRequired,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.func\n\t]).isRequired,\n\topacity: PropTypes.number.isRequired,\n\tfill: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.func, PropTypes.string\n\t]).isRequired,\n\tclip: PropTypes.bool.isRequired,\n};\n\nStackedBarSeries.defaultProps = {\n\tbaseAt: (xScale, yScale/* , d*/) => head(yScale.range()),\n\tdirection: \"up\",\n\tclassName: \"bar\",\n\tstroke: true,\n\tfill: \"#4682B4\",\n\topacity: 0.5,\n\twidth: plotDataLengthBarWidth,\n\tclip: true,\n\tswapScales: false,\n};\n\nexport function identityStack() {\n\tlet keys = [];\n\tfunction stack(data) {\n\t\tconst response = keys.map((key, i) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet arrays = data.map(d => {\n\t\t\t\t// eslint-disable-next-line prefer-const\n\t\t\t\tlet array = [0, d[key]];\n\t\t\t\tarray.data = d;\n\t\t\t\treturn array;\n\t\t\t});\n\t\t\tarrays.key = key;\n\t\t\tarrays.index = i;\n\t\t\treturn arrays;\n\t\t});\n\t\treturn response;\n\t}\n\tstack.keys = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn keys;\n\t\t}\n\t\tkeys = x;\n\t\treturn stack;\n\t};\n\treturn stack;\n}\n\n\nexport function drawOnCanvasHelper(ctx, props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\n\tdrawOnCanvas2(props, ctx, bars);\n}\n\nfunction convertToArray(item) {\n\treturn Array.isArray(item) ? item : [item];\n}\n\nexport function svgHelper(props, moreProps, xAccessor, stackFn, defaultPostAction = identity, postRotateAction = rotateXY) {\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\tconst bars = doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction);\n\treturn getBarsSVG2(props, bars);\n}\n\nfunction doStuff(props, xAccessor, plotData, xScale, yScale, stackFn, postRotateAction, defaultPostAction) {\n\tconst { yAccessor, swapScales } = props;\n\n\tconst modifiedYAccessor = swapScales ? convertToArray(props.xAccessor) : convertToArray(yAccessor);\n\tconst modifiedXAccessor = swapScales ? yAccessor : xAccessor;\n\n\tconst modifiedXScale = swapScales ? yScale : xScale;\n\tconst modifiedYScale = swapScales ? xScale : yScale;\n\n\tconst postProcessor =  swapScales ? postRotateAction : defaultPostAction;\n\n\tconst bars = getBars(props, modifiedXAccessor, modifiedYAccessor, modifiedXScale, modifiedYScale, plotData, stackFn, postProcessor);\n\n\treturn bars;\n}\n\nexport const rotateXY = (array) => array.map(each => {\n\treturn {\n\t\t...each,\n\t\tx: each.y,\n\t\ty: each.x,\n\t\theight: each.width,\n\t\twidth: each.height\n\t};\n});\n\nexport function getBarsSVG2(props, bars) {\n\t/* eslint-disable react/prop-types */\n\tconst { opacity } = props;\n\t/* eslint-enable react/prop-types */\n\n\treturn bars.map((d, idx) => {\n\t\tif (d.width <= 1) {\n\t\t\treturn <line key={idx} className={d.className}\n\t\t\t\tstroke={d.fill}\n\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\tx2={d.x} y2={d.y + d.height} />;\n\t\t}\n\t\treturn <rect key={idx} className={d.className}\n\t\t\tstroke={d.stroke}\n\t\t\tfill={d.fill}\n\t\t\tx={d.x}\n\t\t\ty={d.y}\n\t\t\twidth={d.width}\n\t\t\tfillOpacity={opacity}\n\t\t\theight={d.height} />;\n\t});\n}\n\nexport function drawOnCanvas2(props, ctx, bars) {\n\tconst { stroke } = props;\n\n\tconst nest = d3Nest()\n\t\t.key(d => d.fill)\n\t\t.entries(bars);\n\n\tnest.forEach(outer => {\n\t\tconst { key, values } = outer;\n\t\tif (head(values).width > 1) {\n\t\t\tctx.strokeStyle = key;\n\t\t}\n\t\tconst fillStyle = head(values).width <= 1\n\t\t\t? key\n\t\t\t: hexToRGBA(key, props.opacity);\n\t\tctx.fillStyle = fillStyle;\n\n\t\tvalues.forEach(d => {\n\t\t\tif (d.width <= 1) {\n\t\t\t\t/* <line key={idx} className={d.className}\n\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\t\tx1={d.x} y1={d.y}\n\t\t\t\t\t\t\tx2={d.x} y2={d.y + d.height} />*/\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(d.x, d.y);\n\t\t\t\tctx.lineTo(d.x, d.y + d.height);\n\t\t\t\tctx.stroke();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n\t\t\t} else {\n\t\t\t\t/* <rect key={idx} className={d.className}\n\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\tfill={fill}\n\t\t\t\t\t\tx={d.x}\n\t\t\t\t\t\ty={d.y}\n\t\t\t\t\t\twidth={d.width}\n\t\t\t\t\t\theight={d.height} /> */\n\t\t\t\t/*\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(d.x, d.y, d.width, d.height);\n\t\t\t\tctx.fill();\n\t\t\t\t*/\n\t\t\t\tctx.fillRect(d.x, d.y, d.width, d.height);\n\t\t\t\tif (stroke) ctx.strokeRect(d.x, d.y, d.width, d.height);\n\t\t\t}\n\n\t\t});\n\t});\n}\n\nexport function getBars(props, xAccessor, yAccessor, xScale, yScale, plotData, stack = identityStack, after = identity) {\n\tconst { baseAt, className, fill, stroke, spaceBetweenBar = 0 } = props;\n\n\tconst getClassName = functor(className);\n\tconst getFill = functor(fill);\n\tconst getBase = functor(baseAt);\n\n\tconst widthFunctor = functor(props.width);\n\tconst width = widthFunctor(props, {\n\t\txScale,\n\t\txAccessor,\n\t\tplotData\n\t});\n\n\tconst barWidth = Math.round(width);\n\n\tconst eachBarWidth = (barWidth - spaceBetweenBar * (yAccessor.length - 1)) / yAccessor.length;\n\n\tconst offset = (barWidth === 1 ? 0 : 0.5 * width);\n\n\tconst ds = plotData\n\t\t.map(each => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet d = {\n\t\t\t\tappearance: {\n\t\t\t\t},\n\t\t\t\tx: xAccessor(each),\n\t\t\t};\n\t\t\tyAccessor.forEach((eachYAccessor, i) => {\n\t\t\t\tconst key = `y${i}`;\n\t\t\t\td[key] = eachYAccessor(each);\n\t\t\t\tconst appearance = {\n\t\t\t\t\tclassName: getClassName(each, i),\n\t\t\t\t\tstroke: stroke ? getFill(each, i) : \"none\",\n\t\t\t\t\tfill: getFill(each, i),\n\t\t\t\t};\n\t\t\t\td.appearance[key] = appearance;\n\t\t\t});\n\t\t\treturn d;\n\t\t});\n\n\tconst keys = yAccessor.map((_, i) => `y${i}`);\n\n\t// console.log(ds);\n\n\tconst data = stack().keys(keys)(ds);\n\n\t// console.log(data);\n\n\tconst newData = data.map((each, i) => {\n\t\tconst key = each.key;\n\t\treturn each.map((d) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet array = [d[0], d[1]];\n\t\t\tarray.data = {\n\t\t\t\tx: d.data.x,\n\t\t\t\ti,\n\t\t\t\tappearance: d.data.appearance[key]\n\t\t\t};\n\t\t\treturn array;\n\t\t});\n\t});\n\t// console.log(newData);\n\t// console.log(merge(newData));\n\n\tconst bars = merge(newData)\n\t\t// .filter(d => isDefined(d.y))\n\t\t.map(d => {\n\t\t\t// let baseValue = yScale.invert(getBase(xScale, yScale, d.datum));\n\t\t\tlet y = yScale(d[1]);\n\t\t\t/* let h = isDefined(d.y0) && d.y0 !== 0 && !isNaN(d.y0)\n\t\t\t\t\t? yScale(d.y0) - y\n\t\t\t\t\t: getBase(xScale, yScale, d.datum) - yScale(d.y)*/\n\t\t\tlet h = getBase(xScale, yScale, d.data) - yScale(d[1] - d[0]);\n\t\t\t// console.log(d.y, yScale.domain(), yScale.range())\n\t\t\t// let h = ;\n\t\t\t// if (d.y < 0) h = -h;\n\t\t\t// console.log(d, y, h)\n\t\t\tif (h < 0) {\n\t\t\t\ty = y + h;\n\t\t\t\th = -h;\n\t\t\t}\n\t\t\t// console.log(d.data.i, Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)))\n\t\t\t/* console.log(d.series, d.datum.date, d.x,\n\t\t\t\t\tgetBase(xScale, yScale, d.datum), `d.y=${d.y}, d.y0=${d.y0}, y=${y}, h=${h}`)*/\n\t\t\treturn {\n\t\t\t\t...d.data.appearance,\n\t\t\t\t// series: d.series,\n\t\t\t\t// i: d.x,\n\t\t\t\tx: Math.round(xScale(d.data.x) - width / 2),\n\t\t\t\ty: y,\n\t\t\t\tgroupOffset: Math.round(offset - (d.data.i > 0 ? (eachBarWidth + spaceBetweenBar) * d.data.i : 0)),\n\t\t\t\tgroupWidth: Math.round(eachBarWidth),\n\t\t\t\toffset: Math.round(offset),\n\t\t\t\theight: h,\n\t\t\t\twidth: barWidth,\n\t\t\t};\n\t\t})\n\t\t.filter(bar => !isNaN(bar.y));\n\n\treturn after(bars);\n}\n\nexport default StackedBarSeries;\n"]}