{"version":3,"sources":["../../../src/lib/tooltip/StochasticTooltip.js"],"names":["StochasticTooltip","props","renderSVG","bind","moreProps","onClick","fontFamily","fontSize","yAccessor","displayFormat","label","className","options","appearance","labelFill","displayValuesFor","chartConfig","width","height","currentItem","stroke","stochastic","K","D","originProp","origin","x","y","kLine","windowSize","kWindowSize","dLine","dWindowSize","defaultProps"],"mappings":"AAAA;;;;;;;;;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AACA;;;;;;;;;;;;IAEMA,iB;;;AACL,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACZA,KADY;;AAElB,QAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AAFkB;AAGlB;;;;4BACSC,S,EAAW;AAAA,gBACuD,KAAKH,KAD5D;AAAA,OACZI,OADY,UACZA,OADY;AAAA,OACHC,UADG,UACHA,UADG;AAAA,OACSC,QADT,UACSA,QADT;AAAA,OACmBC,SADnB,UACmBA,SADnB;AAAA,OAC8BC,aAD9B,UAC8BA,aAD9B;AAAA,OAC6CC,KAD7C,UAC6CA,KAD7C;AAAA,iBAEkC,KAAKT,KAFvC;AAAA,OAEZU,SAFY,WAEZA,SAFY;AAAA,OAEDC,OAFC,WAEDA,OAFC;AAAA,OAEQC,UAFR,WAEQA,UAFR;AAAA,OAEoBC,SAFpB,WAEoBA,SAFpB;AAAA,OAGZC,gBAHY,GAGS,KAAKd,KAHd,CAGZc,gBAHY;AAAA,+BAIuBX,SAJvB,CAIZY,WAJY;AAAA,OAIGC,KAJH,yBAIGA,KAJH;AAAA,OAIUC,MAJV,yBAIUA,MAJV;;;AAMpB,OAAMC,cAAcJ,iBAAiB,KAAKd,KAAtB,EAA6BG,SAA7B,CAApB;AANoB,OAOZgB,MAPY,GAODP,UAPC,CAOZO,MAPY;;AAQpB,OAAMC,aAAaF,eAAeX,UAAUW,WAAV,CAAlC;;AAEA,OAAMG,IAAKD,cAAcA,WAAWC,CAAzB,IAA8Bb,cAAcY,WAAWC,CAAzB,CAA/B,IAA+D,KAAzE;AACA,OAAMC,IAAKF,cAAcA,WAAWE,CAAzB,IAA8Bd,cAAcY,WAAWE,CAAzB,CAA/B,IAA+D,KAAzE;;AAXoB,OAaJC,UAbI,GAaW,KAAKvB,KAbhB,CAaZwB,MAbY;;AAcpB,OAAMA,SAAS,oBAAQD,UAAR,CAAf;;AAdoB,iBAeLC,OAAOR,KAAP,EAAcC,MAAd,CAfK;AAAA;AAAA,OAebQ,CAfa;AAAA,OAeVC,CAfU;;AAiBpB;AAAA,eACehB,SADf;AAAA,8BACmDe,CADnD,UAC2DC,CAD3D;AAAA,aAC2EtB;AAD3E;AAAA,OAEkB,CAFlB;AAAA,OAEwB,CAFxB;AAAA,gBAEuCC,UAFvC;AAAA,cAE6DC;AAF7D;AAAA,UAG4BO;AAH5B,cAG4CJ,KAH5C;AAAA,UAIgBU,OAAOQ;AAJvB,cAIkChB,QAAQiB,UAJ1C,UAIyDjB,QAAQkB,WAJjE;AAAA,UAK4BhB;AAL5B;AAAA,UAMgBM,OAAOQ;AANvB,cAM+BN,CAN/B;AAAA,UAO4BR;AAP5B;AAAA,UAQgBM,OAAOW;AARvB,cAQ+BnB,QAAQoB,WARvC;AAAA,UAS4BlB;AAT5B;AAAA,UAUgBM,OAAOW;AAVvB,cAU+BR,CAV/B;AAcA;;;2BACQ;AACR;AAAA,UACO,KADP;AAAA,aAEU,KAAKrB,SAFf;AAAA,YAGS,CAAC,WAAD;AAHT;AAKA;;;;;;AA+BFF,kBAAkBiC,YAAlB,GAAiC;AAChCxB,gBAAe,sBAAO,KAAP,CADiB;AAEhCM,6CAFgC;AAGhCU,SAAQ,CAAC,CAAD,EAAI,CAAJ,CAHwB;AAIhCd,YAAW,2BAJqB;AAKhCD,QAAO;AALyB,CAAjC;;kBAQeV,iB","file":"StochasticTooltip.js","sourcesContent":["\"use strict\";\n\nimport { format } from \"d3-format\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport displayValuesFor from \"./displayValuesFor\";\nimport GenericChartComponent from \"../GenericChartComponent\";\n\nimport { functor } from \"../utils\";\n\nimport ToolTipText from \"./ToolTipText\";\nimport ToolTipTSpanLabel from \"./ToolTipTSpanLabel\";\n\nclass StochasticTooltip extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { onClick, fontFamily, fontSize, yAccessor, displayFormat, label } = this.props;\n\t\tconst { className, options, appearance, labelFill } = this.props;\n\t\tconst { displayValuesFor } = this.props;\n\t\tconst { chartConfig: { width, height } } = moreProps;\n\n\t\tconst currentItem = displayValuesFor(this.props, moreProps);\n\t\tconst { stroke } = appearance;\n\t\tconst stochastic = currentItem && yAccessor(currentItem);\n\n\t\tconst K = (stochastic && stochastic.K && displayFormat(stochastic.K)) || \"n/a\";\n\t\tconst D = (stochastic && stochastic.D && displayFormat(stochastic.D)) || \"n/a\";\n\n\t\tconst { origin: originProp } = this.props;\n\t\tconst origin = functor(originProp);\n\t\tconst [x, y] = origin(width, height);\n\n\t\treturn (\n\t\t\t<g className={className} transform={`translate(${ x }, ${ y })`} onClick={onClick}>\n\t\t\t\t<ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize}>\n\t\t\t\t\t<ToolTipTSpanLabel fill={labelFill}>{`${ label } %K(`}</ToolTipTSpanLabel>\n\t\t\t\t\t<tspan fill={stroke.kLine}>{`${options.windowSize}, ${options.kWindowSize}`}</tspan>\n\t\t\t\t\t<ToolTipTSpanLabel fill={labelFill}>): </ToolTipTSpanLabel>\n\t\t\t\t\t<tspan fill={stroke.kLine}>{K}</tspan>\n\t\t\t\t\t<ToolTipTSpanLabel fill={labelFill}> %D (</ToolTipTSpanLabel>\n\t\t\t\t\t<tspan fill={stroke.dLine}>{options.dWindowSize}</tspan>\n\t\t\t\t\t<ToolTipTSpanLabel fill={labelFill}>): </ToolTipTSpanLabel>\n\t\t\t\t\t<tspan fill={stroke.dLine}>{D}</tspan>\n\t\t\t\t</ToolTipText>\n\t\t\t</g>\n\t\t);\n\t}\n\trender() {\n\t\treturn <GenericChartComponent\n\t\t\tclip={false}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tdrawOn={[\"mousemove\"]}\n\t\t/>;\n\t}\n}\n\nStochasticTooltip.propTypes = {\n\torigin: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.func\n\t]).isRequired,\n\tclassName: PropTypes.string,\n\tfontFamily: PropTypes.string,\n\tfontSize: PropTypes.number,\n\tlabelFill: PropTypes.string,\n\n\tonClick: PropTypes.func,\n\tyAccessor: PropTypes.func.isRequired,\n\toptions: PropTypes.shape({\n\t\twindowSize: PropTypes.number.isRequired,\n\t\tkWindowSize: PropTypes.number.isRequired,\n\t\tdWindowSize: PropTypes.number.isRequired,\n\t}).isRequired,\n\tappearance: PropTypes.shape({\n\t\tstroke: {\n\t\t\tdLine: PropTypes.string.isRequired,\n\t\t\tkLine: PropTypes.string.isRequired,\n\t\t}.isRequired,\n\t}).isRequired,\n\tdisplayFormat: PropTypes.func.isRequired,\n\tdisplayValuesFor: PropTypes.func,\n\tlabel: PropTypes.string.isRequired,\n};\n\nStochasticTooltip.defaultProps = {\n\tdisplayFormat: format(\".2f\"),\n\tdisplayValuesFor: displayValuesFor,\n\torigin: [0, 0],\n\tclassName: \"react-stockcharts-tooltip\",\n\tlabel: \"STO\",\n};\n\nexport default StochasticTooltip;\n"]}