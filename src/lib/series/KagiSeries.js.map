{"version":3,"sources":["../../../src/lib/series/KagiSeries.js"],"names":["KagiSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","xAccessor","xScale","yScale","chartConfig","plotData","className","stroke","fill","strokeWidth","paths","helper","map","each","i","dataSeries","x","item","y","curve","plot","type","defaultProps","yang","yin","currentValueStroke","begin","forEach","strokeStyle","lineWidth","beginPath","prevX","d","moveTo","lineTo","lastPlot","length","last","y1","y2","kagiLine","kagi","idx","close","startAs","push","open","changeTo","changePoint","added","current","reverseAt"],"mappings":"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","file":"KagiSeries.js","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { line, curveStepBefore } from \"d3-shape\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\nimport { isDefined, isNotDefined } from \"../utils\";\n\nclass KagiSeries extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t}\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\n\t\tdrawOnCanvas(ctx, this.props, moreProps, xAccessor);\n\t}\n\trender() {\n\t\treturn <GenericChartComponent\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasToDraw={getAxisCanvas}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\t\t\tdrawOn={[\"pan\"]}\n\t\t/>;\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { xAccessor } = moreProps;\n\t\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\t\tconst { className, stroke, fill, strokeWidth } = this.props;\n\n\t\tconst paths = helper(plotData, xAccessor).map((each, i) => {\n\t\t\tconst dataSeries = line()\n\t\t\t\t.x((item) => xScale(item[0]))\n\t\t\t\t.y((item) => yScale(item[1]))\n\t\t\t\t.curve(curveStepBefore);\n\n\t\t\tdataSeries(each.plot);\n\n\t\t\treturn (<path key={i} d={dataSeries(each.plot)} className={each.type}\n\t\t\t\tstroke={stroke[each.type]} fill={fill[each.type]} strokeWidth={strokeWidth} />);\n\t\t});\n\t\treturn (\n\t\t\t<g className={className}>\n\t\t\t\t{paths}\n\t\t\t</g>\n\t\t);\n\t}\n}\nKagiSeries.propTypes = {\n\tclassName: PropTypes.string,\n\tstroke: PropTypes.object,\n\tfill: PropTypes.object,\n\tstrokeWidth: PropTypes.number.isRequired,\n};\n\nKagiSeries.defaultProps = {\n\tclassName: \"react-stockcharts-kagi\",\n\tstrokeWidth: 2,\n\tstroke: {\n\t\tyang: \"#6BA583\",\n\t\tyin: \"#E60000\"\n\t},\n\tfill: {\n\t\tyang: \"none\",\n\t\tyin: \"none\"\n\t},\n\tcurrentValueStroke: \"#000000\",\n};\n\nfunction drawOnCanvas(ctx, props, moreProps, xAccessor) {\n\tconst { stroke, strokeWidth, currentValueStroke } = props;\n\tconst { xScale, chartConfig: { yScale }, plotData } = moreProps;\n\n\tconst paths = helper(plotData, xAccessor);\n\n\tlet begin = true;\n\n\tpaths.forEach((each) => {\n\t\tctx.strokeStyle = stroke[each.type];\n\t\tctx.lineWidth = strokeWidth;\n\n\t\tctx.beginPath();\n\t\tlet prevX;\n\t\teach.plot.forEach(d => {\n\t\t\tconst [x, y] = [xScale(d[0]), yScale(d[1])];\n\t\t\tif (begin) {\n\t\t\t\tctx.moveTo(x, y);\n\t\t\t\tbegin = false;\n\t\t\t} else {\n\t\t\t\tif (isDefined(prevX)) {\n\t\t\t\t\tctx.lineTo(prevX, y);\n\t\t\t\t}\n\t\t\t\tctx.lineTo(x, y);\n\t\t\t}\n\t\t\tprevX = x;\n\t\t\t// console.log(d);\n\n\t\t});\n\t\tctx.stroke();\n\t});\n\tconst lastPlot = paths[paths.length - 1].plot;\n\tconst last = lastPlot[lastPlot.length - 1];\n\tctx.beginPath();\n\t// ctx.strokeStyle = \"black\";\n\tctx.lineWidth = 1;\n\n\tconst [x, y1, y2] = [xScale(last[0]), yScale(last[2]), yScale(last[3])];\n\t// console.log(last, x, y);\n\tctx.moveTo(x, y1);\n\tctx.lineTo(x + 10, y1);\n\tctx.stroke();\n\n\tctx.beginPath();\n\tctx.strokeStyle = currentValueStroke;\n\tctx.moveTo(x - 10, y2);\n\tctx.lineTo(x, y2);\n\tctx.stroke();\n}\n\nfunction helper(plotData, xAccessor) {\n\tconst kagiLine = [];\n\tlet kagi = {};\n\tlet d = plotData[0];\n\tlet idx = xAccessor(d);\n\n\tfor (let i = 0; i < plotData.length; i++) {\n\t\td = plotData[i];\n\n\t\tif (isNotDefined(d.close)) continue;\n\t\tif (isNotDefined(kagi.type)) kagi.type = d.startAs;\n\t\tif (isNotDefined(kagi.plot)) kagi.plot = [];\n\n\t\tidx = xAccessor(d);\n\t\tkagi.plot.push([idx, d.open]);\n\n\t\tif (isDefined(d.changeTo)) {\n\t\t\tkagi.plot.push([idx, d.changePoint]);\n\t\t\tkagi.added = true;\n\t\t\tkagiLine.push(kagi);\n\n\t\t\tkagi = {\n\t\t\t\ttype: d.changeTo,\n\t\t\t\tplot: [],\n\t\t\t\tadded: false,\n\t\t\t};\n\t\t\tkagi.plot.push([idx, d.changePoint]);\n\t\t}\n\t}\n\n\tif (!kagi.added) {\n\t\tkagi.plot.push([idx, d.close, d.current, d.reverseAt]);\n\t\tkagiLine.push(kagi);\n\t}\n\n\t// console.log(d.reverseAt);\n\n\treturn kagiLine;\n}\n\nexport default KagiSeries;\n"]}